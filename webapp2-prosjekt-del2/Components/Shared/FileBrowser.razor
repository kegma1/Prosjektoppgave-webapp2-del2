@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore
@inject FileSystemService FileSystemService
@inject NavigationManager _navigationManager

@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers;
@inject HttpClient Http

<div>
    <dir class="d-flex justify-content-between p-0">
        <button type="button" class="btn btn-primary" @onclick="createDocument">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-square-fill" viewBox="0 0 16 16">
                <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z"/>
                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4"/>
            </svg> 
            Document
        </button>
        
        <EditForm Model="Model" OnSubmit="createFolder" class="d-flex">
            <AntiforgeryToken />
            <div class="form-group d-flex align-items-center">
                <label class="text-nowrap">New folder name</label>
                <InputText class="form-control" @bind-Value="Model!.folderName" />
            </div>
            <button type="submit" class="btn btn-primary">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-square-fill" viewBox="0 0 16 16">
                    <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z"/>
                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4"/>
                </svg> 
            </button>
        </EditForm>
    </dir>

    <dir class="d-flex justify-content p-0 align-items-center">
        <button type="button" class="btn btn-primary" @onclick="moveUpDirectory">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-90deg-up" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708z"/>
            </svg>
        </button>
        <h3 class="px-4">@Path</h3>
    </dir>

    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th scope="col">Type</th>
                <th scope="col">name</th>
                <th scope="col">Date</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var folder in content.folders) {
            <tr style="cursor: pointer;" onclick="location.href='@($"/Browse{@Path}/{@folder.name}")'">
                <td scope="row">üìÅ</td>
                <td>@folder.name</td>
                <td></td>
            </tr>
        }
        @foreach (var document in content.documents) {
            <tr style="cursor: pointer;" onclick="location.href='@($"/View{@Path}/{@document.title}")'">
                <td scope="row">üßæ</td>
                <td>@document.title</td>
                <td>@document.createdDate</td>
            </tr>
        }
        </tbody>

    </table>

    <style>
        .add-item-button {
            text-align: center;
            vertical-align: middle;
            cursor: pointer
        }
    </style>
</div>

@code {
    [Required]
    [Parameter] public string Path { get; set; } = string.Empty;
    
    private Folder? currentFolder { get; set; }
    private ContentModel content { get; set; } = new();

    private class ContentModel {
        public List<Folder> folders { get; set; } = new();
        public List<Document> documents { get; set; } = new();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetUp();
            StateHasChanged();
        }
    }

    private async Task SetUp() {
        Path = "/" + Path;
        var result = await ProtectedLocalStore.GetAsync<string>("token");
        var token = result.Success ? result.Value : null;

        if (token == null) {
            return;
        }

        if (!FileSystemService.IsInitialized()) {
            await FileSystemService.InitializeFileSystemAsync(token);
        }

        currentFolder = FileSystemService.GetFolder(Path);

        if (currentFolder == null) {
            Console.WriteLine("cant find this folder");
            return;
        }


        if (token != null) {
            var req = new HttpRequestMessage(HttpMethod.Get, $"Folder/content/{currentFolder.id}");
            req.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var res = await Http.SendAsync(req);
            res.EnsureSuccessStatusCode();
            
            content = await res.Content.ReadFromJsonAsync<ContentModel>();
        }
    }

    private async Task createFolder() {
        if (string.IsNullOrEmpty(Model?.folderName))
            return;
        
        if (currentFolder == null)
            return;

        if (FileSystemService.GetFolder($"{Path}/{Model?.folderName}") != null) {
            Model.folderName = string.Empty;
            return;
        }

        var result = await ProtectedLocalStore.GetAsync<string>("token");
        var token = result.Success ? result.Value : null;

        if (token == null)
            return;

        var req = new HttpRequestMessage(HttpMethod.Post, $"Folder");
        req.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
        req.Content = JsonContent.Create(new {name = Model?.folderName, parentId = currentFolder.id});

        var res = await Http.SendAsync(req);
        res.EnsureSuccessStatusCode();

        await FileSystemService.InitializeFileSystemAsync(token);
        _navigationManager.Refresh(true);
        Model.folderName = string.Empty;
    }

    private class newFolder {
        public string? folderName { get; set; }
    }

    [SupplyParameterFromForm]
    private newFolder? Model { get; set; }
    protected override void OnInitialized() => Model ??= new();
    private async Task createDocument() {

    }

    private void moveUpDirectory() {
        if (currentFolder == null)
            return;
        
        if (currentFolder.parentFolder == null)
            return;

        var parentPath = FileSystemService.GetVirtualPath(currentFolder.parentFolder);
        _navigationManager.NavigateTo($"Browse{parentPath}", true);
    }
}