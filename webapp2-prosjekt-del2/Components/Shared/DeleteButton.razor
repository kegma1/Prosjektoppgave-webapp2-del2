@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject HttpClient Http
@inject ProtectedLocalStorage ProtectedLocalStore
@inject FileSystemService FileSystemService
@inject NavigationManager _navigationManager

<button @onclick=@delete class="btn btn-primary">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
        <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"/>
    </svg>
</button>

@code {
    [Parameter] public IFile? File { get; set; }

    private string? token { get; set; }

    private class ContentModel {
        public List<Folder> folders { get; set; } = new();
        public List<Document> documents { get; set; } = new();
    }

    public async Task delete() {
        if (File != null)
            await DeleteRecursively(File);
    }

    private async Task DeleteRecursively(IFile file) {

        if (token == null) {
            var result = await ProtectedLocalStore.GetAsync<string>("token");
            token = result.Success ? result.Value : null;
            if (token == null)
                return;
        }

        if (file.endpoint == "Folder") {
            var req = new HttpRequestMessage(HttpMethod.Get, $"Folder/content/{file.id}");
            req.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var res = await Http.SendAsync(req);
            res.EnsureSuccessStatusCode();
            
            var content = await res.Content.ReadFromJsonAsync<ContentModel>();
            if (content == null)
                return;

            foreach (var folder in content.folders) {
                await DeleteRecursively(folder);
            }
            foreach (var document in content.documents) {
                await DeleteRecursively(document);
            }
        }

        var del_req = new HttpRequestMessage(HttpMethod.Delete, $"{file.endpoint}/{file.id}");
        del_req.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var del_res = await Http.SendAsync(del_req);
        del_res.EnsureSuccessStatusCode();

        _navigationManager.Refresh(true);
    }
}