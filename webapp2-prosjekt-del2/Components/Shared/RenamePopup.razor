@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore
@inject FileSystemService FileSystemService
@inject NavigationManager _navigationManager

@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers;
@inject HttpClient Http

@if (Visible) {
    <div class="popup-overlay">
        <div class="popup-content p-2">
            <div class="d-flex justify-content-between p-0">
                <h3>Rename</h3>
                <div style="cursor: pointer;" @onclick="async() => await OnSubmit.InvokeAsync()">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                        <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z"/>
                    </svg>
                </div>
            </div>
            <EditForm Model="Model" OnSubmit="rename" class="d-flex">
                <AntiforgeryToken />
                <div class="form-group d-flex align-items-center">
                    <InputText class="form-control" @bind-Value="Model!.newName" placeholder="@file.name"/>
                </div>
                <button type="submit" class="btn btn-primary">Rename</button>
            </EditForm>
        </div>
    </div>

    <style>
        .popup-overlay {
            position: fixed;

            top: 25%;
            left: 50%;
            transform: translate(-50%, -50%);

            background-color: rgb(179, 179, 179);
            border-radius: 10px;
        }
    </style>
}
@code {

    [Parameter] public IFile file { get; set; }
    [Parameter] public string Path  { get; set; }
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback OnSubmit { get; set; }

    private class renameModel {
        public string? newName { get; set; }
    }

    
    [SupplyParameterFromForm]
    private renameModel? Model { get; set; }
    protected override void OnInitialized() => Model ??= new();

    private async Task rename() {
        if (String.IsNullOrEmpty(Model?.newName))
            return;
        
        var result = await ProtectedLocalStore.GetAsync<string>("token");
        var token = result.Success ? result.Value : null;

        if (token == null)
            return;

            
        if (FileSystemService.GetFile($"{Path}/{Model.newName}") != null) {
            Model.newName = string.Empty;
            return;
        }

        var req = new HttpRequestMessage(HttpMethod.Put, $"{file.endpoint}/{file.id}");
        req.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
        if (file.endpoint == "Folder") {
            req.Content = JsonContent.Create(new {name = Model?.newName, parentId = file.parentFolderId});
        } else {
            req.Content = JsonContent.Create(new {name = Model?.newName, folderId = file.parentFolderId, content = string.Empty});
        }

        var res = await Http.SendAsync(req);
        res.EnsureSuccessStatusCode();

        await OnSubmit.InvokeAsync();
        await FileSystemService.InitializeFileSystemAsync(token);
        _navigationManager.Refresh(true);
    }
}