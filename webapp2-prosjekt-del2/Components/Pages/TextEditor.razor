@page "/View/{**Path}"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore
@using webapp2_prosjekt_del2.Components.Shared
@inject FileSystemService FileSystemService
@inject NavigationManager _navigationManager

@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers;
@inject HttpClient Http
@inject IJSRuntime JS

<PageTitle>View</PageTitle>
@if (document != null && document.contentTypeId == 1) {
    <div class="d-flex flex-column align-items-center">
        <EditForm Model="Model" OnSubmit="Save">
            <AntiforgeryToken />
            <h1>
                <InputText class="form-control" @bind-Value="Model!.title" />
            </h1>
            <InputTextArea class="form-control" @bind-Value="Model!.content" />
            <hr>
            <div class="d-flex justify-content-between p-0"> 
                <button type="button" class="btn btn-primary" @onclick="goBack">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8"/>
                    </svg>
                </button>

                <button type="submit" class="btn btn-primary">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-floppy" viewBox="0 0 16 16">
                        <path d="M11 2H9v3h2z"/>
                        <path d="M1.5 0h11.586a1.5 1.5 0 0 1 1.06.44l1.415 1.414A1.5 1.5 0 0 1 16 2.914V14.5a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 14.5v-13A1.5 1.5 0 0 1 1.5 0M1 1.5v13a.5.5 0 0 0 .5.5H2v-4.5A1.5 1.5 0 0 1 3.5 9h9a1.5 1.5 0 0 1 1.5 1.5V15h.5a.5.5 0 0 0 .5-.5V2.914a.5.5 0 0 0-.146-.353l-1.415-1.415A.5.5 0 0 0 13.086 1H13v4.5A1.5 1.5 0 0 1 11.5 7h-7A1.5 1.5 0 0 1 3 5.5V1H1.5a.5.5 0 0 0-.5.5m3 4a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5V1H4zM3 15h10v-4.5a.5.5 0 0 0-.5-.5h-9a.5.5 0 0 0-.5.5z"/>
                    </svg>
                </button>
            </div>

        </EditForm>
    </div>
} else if (document != null && document.contentTypeId == 2) {
    <div class="d-flex flex-column align-items-center">
        <h1>@document!.name</h1>
        <img src="@imgSrc" alt="this is a dynamic image. idk what is in here" />
        <hr>
        <div class="d-flex justify-content-between p-0"> 
            <button type="button" class="btn btn-primary mx-5" @onclick="goBack">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8"/>
                </svg>
            </button>

            <button type="submit" class="btn btn-primary mx-5" @onclick="Download">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-bar-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1 3.5a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13a.5.5 0 0 1-.5-.5M8 6a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 0 1 .708-.708L7.5 12.293V6.5A.5.5 0 0 1 8 6"/>
                </svg>
            </button>
        </div>
    </div>
}

<script>
    function saveAsFile(fileName, base64Data) {
        const link = document.createElement("a");
        link.href = "data:application/octet-stream;base64," + base64Data;
        link.download = fileName;
        link.click();
    }
</script>

@code {
    [Parameter]
    public string Path { get; set; } = string.Empty;
    private Document? document { get; set; }
    
    private string? imgSrc { get; set; }

    private class editModel {
        public string? title { set; get; }
        public string? content { set; get; }
    }

    [SupplyParameterFromForm]
    private editModel? Model { get; set; }
    protected override void OnInitialized() => Model ??= new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Model ??= new();
            Path = "/" + Path;
            await SetUp();
            StateHasChanged();
        }
    }

    private string? renamedPath(string rootPath, string oldName, string newName) {
        if (rootPath.EndsWith(oldName)) return null;

        return rootPath.Substring(0, rootPath.Length - oldName.Length) + newName;
    }

    private async Task Save() {
        if (document == null) return;

        var result = await ProtectedLocalStore.GetAsync<string>("token");
        var token = result.Success ? result.Value : null;

        if (token == null) return;

        if (Model == null) return;

        if (document.name != Model.title!) {
            var newPath = renamedPath(Path, document.name, Model.title!);
            Console.WriteLine(newPath);
            if (newPath == null) _navigationManager.Refresh(true);

            if (FileSystemService.GetDocument(newPath) != null) {
                _navigationManager.Refresh(true);
            }
        }

        var req = new HttpRequestMessage(HttpMethod.Put, $"Document/{document.id}");
        req.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
        req.Content = JsonContent.Create(new {name = Model?.title, content = Model?.content, folderId = document.parentFolderId});

        var res = await Http.SendAsync(req);
        res.EnsureSuccessStatusCode();

        await FileSystemService.InitializeFileSystemAsync(token);
        goBack();
    }

    private void goBack() {
        var parenePath = FileSystemService.GetVirtualPath(document!.parentFolder!);
        if (parenePath != null) 
            _navigationManager.NavigateTo($"Browse{parenePath}", true);
    }
    private async Task Download() {
        if (document == null) return;

        var result = await ProtectedLocalStore.GetAsync<string>("token");
        var token = result.Success ? result.Value : null;

        if (token == null) return;


        var req = new HttpRequestMessage(HttpMethod.Get, $"Document/download/{document.id}");
        req.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var res = await Http.SendAsync(req);
        res.EnsureSuccessStatusCode();

        var imageBytes = await res.Content.ReadAsByteArrayAsync();
        
        await JS.InvokeVoidAsync("saveAsFile", document.name, Convert.ToBase64String(imageBytes));

    }

    private async Task SetUp() {
        var result = await ProtectedLocalStore.GetAsync<string>("token");
        var token = result.Success ? result.Value : null;

        if (token == null) {
            return;
        }

        if (!FileSystemService.IsInitialized()) {
            await FileSystemService.InitializeFileSystemAsync(token);
        }

        document = FileSystemService.GetDocument(Path);

        if (document == null) return;

        if (document.contentTypeId == 2) {
            imgSrc = $"http://localhost:5186/{document.content}";
        }

        if (Model != null) {
            Model.title = document.name;
            Model.content = document.content;
        }

    }
}